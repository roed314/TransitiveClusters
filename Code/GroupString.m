// Ported from FiniteGroups/Code/utils.m and lehmer.m

intrinsic DecodePerm(x::RngIntElt, n::RngIntElt) -> GrpPermElt
    {Given rank x, return corresponding permutation in Sym(n)}
    return LehmerCodeToPermutation(RankToLehmerCode(x,n));
end intrinsic;

intrinsic RankToLehmerCode(x::RngIntElt, n::RngIntElt) -> SeqEnum
  {Returns the Lehmer code for rank x}
  lehmer := [];
  for j in [1..n] do
    Append(~lehmer, x mod j);
    x := x div j;
  end for;
  Reverse(~lehmer);
  return lehmer;
end intrinsic;

intrinsic LehmerCodeToPermutation(lehmer::SeqEnum) -> GrpPermElt
  {Returns permutation corresponding to Lehmer code.}
  n := #lehmer;
  lehmer := [el + 1 : el in lehmer];
  p_seq := [];
  open_spots := [1..n];
  for j in lehmer do
    Append(~p_seq, open_spots[j]);
    Remove(~open_spots,j);
  end for;
  return Sym(n)!p_seq;
end intrinsic;

// We encode groups using strings that allow for their reconstruction
// Moved from IO.m so that it could be used while just attaching hashspec

function is_iterative_description(desc)
    for i in [1..#desc - 1] do
        if desc[i] eq "-" and not desc[i+1] in "123456789" then
            return true;
        end if;
    end for;
    return false;
end function;

sporadic_codes := AssociativeArray();
sporadic_codes["J1"] := "7,11Mat010000000100000001000000010000000100000001100000082AA8A89113133AA8A882A8A882A8A882AA13391133391131";
sporadic_codes["J2"] := "6,q4Mat111100000000101100000000101011110000011010110000001111110001111011001100011011101111011001101001010111111000000000001010111011110111111011011101";
sporadic_codes["HS"] := "Simp138";
sporadic_codes["J3"] := "18,q9Mat
sporadic_codes["McL"] := "Simp269";
sporadic_codes["He"] := "51,2Mat
sporadic_codes["Ru"] := "28,2Mat
sporadic_codes["Co3"] := "22,2Mat
sporadic_codes["Co2"] := "22,2Mat
sporadic_codes["Co1"] := "24,2Mat

function HexToInteger(s)
    return StringToInteger(s, 16);
end function;
function HexToSignedInteger(s)
    if HexToInteger(s[1]) gt 7 then
        return HexToInteger(s) - 16^#s;
    else
        return HexToInteger(s);
    end if;
end function;

function IntegerToHex(n, b)
    n := Integers()!n;
    if n lt 0 then
        n +:= 16^b;
    end if;
    assert n lt 16^b;
    s := Sprintf("%h", n);
    s := s[3..#s]; // strip leading 0x
    return "0"^(b-#s) * s;
end function;

intrinsic StringToGroup(s::MonStgElt) -> Grp
{}
    // We want to support iterated constructions separated by hyphens, but also need to handle negative signs
    if is_iterative_description(s) then
        path := Split(s, "-");
        G := StringToGroup(path[1]);
        for zig in path[2..#path] do
            if zig[1] eq "A" then
                // Since computing the automorphism group can be expensive, we allow storage of the actual automorphisms
                if #zig eq 1 then
                    G := AutomorphismGroup(G);
                else
                    gens, auts := Explode(Split(zig[2..#zig], ";"));
                    gens := [StringToInteger(c) : c in Split(gens, ",")];
                    auts := [StringToInteger(c) : c in Split(auts, ",")];
                    auts := [auts[i..i+#gens-1] : i in [1..#auts by #gens]];
                    if Type(G) eq GrpPerm then
                        n := Degree(G);
                        gens := [DecodePerm(gen, n) : gen in gens];
                        auts := [[DecodePerm(x, n) : x in imgs] : imgs in auts];
                    elif Type(G) eq GrpMat then
                        d := Dimension(G);
                        R := CoefficientRing(G);
                        if Type(R) eq FldFin and Degree(R) gt 1 then
                            k := Degree(R);
                            gens := [R!gens[i..i+k-1] : i in [1..#gens by k]];
                            auts := [[R!imgs[i..i+k-1] : i in [1..#imgs by k]] : imgs in auts];
                        end if;
                        gens := [G!gens[i..i+d^2-1] : i in [1..#gens by d^2]];
                        auts := [[G!imgs[i..i+d^2-1] : i in [1..#imgs by d^2]] : imgs in auts];
                    elif Type(G) eq GrpPC then
                        n := NumberOfPCGenerators(G);
                        gens := [G!gens[i..i+n-1] : i in [1..#gens by n]];
                        auts := [[G!imgs[i..i+n-1] : i in [1..#imgs by n]] : imgs in auts];
                    else
                        error "Unsupported group type", Type(G);
                    end if;
                    G := AutomorphismGroup(G, gens, auts);
                end if;
            elif zig eq "Z" then
                G := Center(G);
            elif zig eq "D" then
                G := DerivedSubgroup(G);
            elif zig eq "P" then
                G := FrattiniSubgroup(G);
            elif zig eq "F" then
                G := FittingSubgroup(G);
            elif zig eq "R" then
                G := Radical(G);
            elif zig eq "S" then
                G := Socle(G);
            else
                // may want to add quotients here
                error "Unrecognized group construction term", zig;
            end if;
        end for;
        return G;
    elif "Simp" in s then
        N := StringToInteger(s[5..#s]);
        return SimpleGroup(N);
    elif "Perf" in s then
        N := StringToInteger(s[5..#s]);
        return PermutationGroup(PerfectGroupDatabase(), N);
    elif "Chev" in s then
        series, n, q := Explode(Split(s[5..#s], ","));
        n := StringToInteger(n);
        q := StringToInteger(q);
        return ChevalleyGroup(series, n, q);
    elif "Mat" in s then
        dR, L := Explode(Split(s, "Mat"));
        d, Rcode := Explode(Split(dR, ","));
        d := StringToInteger(d);
        b := 1;
        if Rcode eq "0" then
            R := Integers();
            b := #L div d^2;
        elif Rcode[1] eq "q" then
            q := StringToInteger(Rcode[2..#Rcode]);
            _, p := IsPrimePower(q);
            b := 1 + Ilog(16, p-1);
            R := GF(q);
        else
            N := StringToInteger(Rcode);
            b := 1 + Ilog(16, N-1);
            R := Integers(N);
        end if;
        if "," in L then
            L := [StringToInteger(c) : c in Split(L, ",")];
        else
            assert IsDivisibleBy(#L, d^2);
            if Rcode eq "0" then
                L := [HexToSignedInteger(L[i..i+b-1]) : i in [1..#L by b]];
            else
                L := [HexToInteger(L[i..i+b-1]) : i in [1..#L by b]];
            end if;
        end if;
        assert IsDivisibleBy(#L, d^2);
        if Rcode[1] eq "q" then
            k := Degree(R);
            L := [R!L[i..i+k-1] : i in [1..#L by k]];
        end if;
        L := [L[i..i+d^2-1] : i in [1..#L by d^2]];
        return MatrixGroup<d, R| L >;
    elif "Perm" in s then
        n, L := Explode(Split(s, "Perm"));
        n := StringToInteger(n);
        L := [DecodePerm(StringToInteger(c), n) : c in Split(L, ",")];
        return PermutationGroup<n | L>;
    elif "PC" in s then
        N, code := Explode([StringToInteger(c) : c in Split(s, "PC")]);
        return SmallGroupDecoding(code, N);
    elif s[#s] eq ")" and #Split(s, "(") eq 2 then
        // We just use the Magma command to store classical matrix groups, since we can then recover
        // the homomorphism in the projective case
        // We don't just eval in case this code is ever used with untrusted input
        cmd, data := Explode(Split(s[1..#s-1], "("));
        n, q := Explode([StringToInteger(c) : c in Split(data, ",")]);
        assert cmd in ["GL", "SL", "Sp", "SO", "SOPlus", "SOMinus", "SU", "GO", "GOPlus", "GOMinus", "GU", "CSp", "CSO", "CSOPlus", "CSOMinus", "CSU", "CO", "COPlus", "COMinus", "CU", "Omega", "OmegaPlus", "OmegaMinus", "Spin", "SpinPlus", "SpinMinus", "PGL", "PSL", "PSp", "PSO", "PSOPlus", "PSOMinus", "PSU", "PGO", "PGOPlus", "PGOMinus", "PGU", "POmega", "POmegaPlus", "POmegaMinus", "PGammaL", "PSigmaL", "PSigmaSp", "PGammaU", "AGL", "ASL", "ASp", "AGammaL", "ASigmaL", "ASigmaSp"];
        cmd := eval cmd;
        return cmd(n, q);
    elif s in ["J1", "J2", "HS", "J3", "McL", "He", "Ru", "Co3", "Co2", "Co1"] then
        return StringToGroup(sporadic_codes[s]);
    elif "." in s then
        N, i := Explode([StringToInteger(c) : c in Split(s, ".")]);
        return SmallGroup(N, i);
    elif "T" in s then
        n, t := Explode([StringToInteger(c) : c in Split(s, "T")]);
        return TransitiveGroup(n, t);
    else
        error "Unrecognized format", s;
    end if;
end intrinsic;
